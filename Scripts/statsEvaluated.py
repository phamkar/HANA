
'''
______________________________________________________________________________________________________________________________________________________________
This scripts evaluates the stat files generated by XPLOR-NIH after the initial run (cycle 0)--- not correct---. Here it'll set the initial endurance score as 20, an arbitrary
value. Then using the values within the stats file to set penalties score which will deduct from endurance score and remove any restraints that fall under the
set threshold. ???

Todo:
[!] Remove hard pathways
[] Set cycles in correct order
[] Set comments throughout script for better understanding
[] set_restraint_use function - this function is not used in the script, yet...
______________________________________________________________________________________________________________________________________________________________
'''

import os, sys, re, subprocess #import neccesay libraires used throughout the code

##############################################################################################################################################################
#                                                                       Parse Stats File                                                                     #       
##############################################################################################################################################################

def read_NOEPot(lines, pot_name):
    '''
    ____________________________________________________________________________________________________
    input: lines of stat file and name/type of potential energy (i.e alt, noe, hbond, etc.)
    output: viol_percent, viol_amount, viol_index, penalty, restraint_name.strip()]

    This function reads the stats file for the run. The stat files contains the restraint from all *.tbl
    ____________________________________________________________________________________________________
    '''

    key = f'violations in NOEPot term {pot_name}' # ex: 'violations in NOEPot term hbond'
    results = []
    for i in range(len(lines)): 
        line = lines[i]
        if line.find(key) == -1: # checks if the key is not present in the current line then find() returns -1, 
                                 # if found then a non-negative integer will be returned
            continue
        startidx = i
        for j in range(startidx + 4, len(lines)):
            line2 = lines[j]
            if line2 == '' or line2.startswith('violations'):
                break
            sp_list = line2.split()
            try:
                viol_percent, viol_amount, viol_index = float(sp_list[0]), float(sp_list[1]), int(sp_list[2])
                restraint_name = ' '.join(sp_list[3:])
            except:
                continue
            penalty = viol_percent * viol_amount / 100.
            results.append([viol_percent, viol_amount, viol_index, 
                            penalty, restraint_name.strip()])
    
    return results

def read_XplorPot(lines, pot_name):
    '''
    ________________________________________________________________________________________________________________________
    input: lines of stat file and name/type of potential energy i.e CDIH (dihedral restraints), ANGL, BOND, IMPR(?), and VDW
    output: [viol_percent, viol_amount, viol_index, penalty, restraint_name]
    This function is similar to read_NOEPot function. It takes the lines from the stat file and search for the term
    'violations in XPLORPot term {pot_name}', instead of 'violations in NOEPot term {pot_name}'. For this function,
    the CDIH (dihedral restraints), ANGL, BOND, IMPR(?), and VDW were determined.
    ________________________________________________________________________________________________________________________
    '''

    key = f'violations in XPLORPot term {pot_name}'
    results = []
    for i in range(len(lines)):
        line = lines[i]
        if line.find(key) == -1:
            continue
        startidx = i
        for j in range(startidx + 4, len(lines)):
            line2 = lines[j]
            if line2 == '' or line2.startswith('violations'):
                break
            sp_list = line2.split()
            try:
                viol_percent, viol_amount, viol_index = float(sp_list[0]), float(sp_list[1]), int(sp_list[2])
                restraint_name = ' '.join(sp_list[3:])
            except:
                continue
            penalty = viol_percent * viol_amount / 1000.
            results.append([viol_percent, viol_amount, viol_index, 
                            penalty, restraint_name])
    
    return results

def parse_xplor_stats(stats_file):
    '''
    ______________________________________________________________________________________________________________
    input: stats file pathway
    output: NOEPot and XPLOrPot restraints are added to a dictionary called 'result_dict'
    This function is now parsing the stat file. It uses read_NOEPot and read_XplorPot. Here lines of the stat file
    is defined. 
    ______________________________________________________________________________________________________________
    '''

    if not os.path.exists(stats_file):
        return []
    f = open(stats_file, 'r')
    lines = f.readlines()
    f.close()

    results_dict = {}
    # start parsing to get information after the run
    alt_results = read_NOEPot(lines, 'alt')
    results_dict['alt_viol'] = alt_results

    noe_results = read_NOEPot(lines, 'noe')
    results_dict['noe_viol'] = noe_results

    hbond_results = read_NOEPot(lines, 'hbond')
    results_dict['hbond_viol'] = hbond_results

    distca_results = read_NOEPot(lines, 'distca')
    results_dict['distca_viol'] = distca_results

    CDIH_results = read_XplorPot(lines, 'CDIH')
    results_dict['CDIH_viol'] = CDIH_results

    return results_dict

'''
______________________________________________________________________________________________________
Summary on what is happening so far: The stat file that was generated through XPLOR-NIH run is parsed. 
Its restraints are defined and added to a dictionary to be called later on in the script.
______________________________________________________________________________________________________
'''

##############################################################################################################################################################
#                                                                       Get and Set Restraints                                                               #
##############################################################################################################################################################

def get_restraint_use(restraint):
    '''
    ____________________________________________________________________________________________________
    input: restraints 
    output: If the restraint does NOT have the "!" character then it strips that line and returns it
    This function is search for any restraints within the alt.tbl. It searches for the character '!' and
    strips the line if it does not have the "!" character.  
    ____________________________________________________________________________________________________
    '''
    return restraint.strip() != '!'

 # The following function is redunant and I'm not sure how it is implemented?
    # Per Dr. Lee: it enables/disables a restraint. it must be you who should code when score goes below zero. 
   
def set_restraint_use(restraint, enable):
    '''
    _______________________________________________________________________________________________
    input: restraint and if it's true or false
    output: restraints or "! " + restraints

    This functions utilizes the get_restraint_use function to enable or disable the restraints. ??? 
    _______________________________________________________________________________________________
    '''
    if enable == True:
        # if restraint has '!' it'll return the line within the alt.tbl
        if not get_restraint_use(restraint):
            return restraint.strip()[1:].strip()
        return restraint
    # if enable is False and '!' does exist then it'll return the restraint
    if not get_restraint_use(restraint):
        return restraint
    return '! ' + restraint

##############################################################################################################################################################
#                                                                       Set Endurance Score                                                                  #
##############################################################################################################################################################

def endurance_score_exist(restraint):
    '''
    _______________________________________________________
    input: restraints
    output: True or False
    This function checks if the endurance score exists.
    Endurance score is found after '!ENDURANCE' characters.
    _______________________________________________________
    '''

    return restraint.strip().split()[-2] == '!ENDURANCE'

def get_endurance_score(restraint):
    '''
    _______________________________________________________________________
    input: restraints
    output: endurance score
    This function obtains the endurance score (if it exists). 
    If endurance score does not exist then it returns a null value of -1000
    _______________________________________________________________________
    '''
    if not endurance_score_exist(restraint):
        return -10000
    return float(restraint.strip().split()[-1])

def set_endurance_score(restraint, score):
    '''
    ________________________________________________________________
    input: restraints and endurance score
    output: restraint and endurance score
    This function appends the restraints to the endurance score ???
    ________________________________________________________________
    '''
    if endurance_score_exist(restraint):
       return ' '.join(restraint.split()[:-1] + [str(score)])
    return restraint + f' !ENDURANCE {score}' 

##############################################################################################################################################################
#                                                                       Filter Through alt.tbl                                                               #
##############################################################################################################################################################

def filter_alt_file (restraint):
    '''
    __________________________________________________________________________________
    input: restraints
    output: segids+resids+atms
    This function filters for 'segid', 'resid', and atom names within the alt.tbl file.
    It searches for these term within chain A and B.
    __________________________________________________________________________________
    '''
    restraintStrip = restraint.strip().split()
    segids = []
    resids = []
    atms = []
    try:
        for i in range(len(restraintStrip)):
            if 'segid' in restraintStrip[i] or '(segid' in restraintStrip[i]:
                segids.append(restraintStrip[i+1])
            if 'resid' in restraintStrip[i]:
                resids.append(restraintStrip[i+1])
            if 'name' in restraintStrip[i]:
                atmName = restraintStrip[i+1]
                atmNameStrip = atmName.strip(')')
                atms.append(atmNameStrip)

    except IndexError:
        pass
    filterItems = segids+resids+atms
    return filterItems

##############################################################################################################################################################
#                                                                       Setting Penalties                                                                    #
##############################################################################################################################################################

def apply_penalty_to_restraint(restraint, high_alt_viol_list):
    '''
    __________________________________________________________________________________________________________________________________________________________
    input: restraints and a list of high violation terms
    output: restraints with new endurance score
    This funtion applies the penalties to obtain a new endurance score
    This function used the filter_alt_file function to obtain the needed values for comparison
    It parse through the high violation listed that was obtained from the stat file then it compares the values of viol list to the restaints of the alt file. 
    If the alt restraints are not in the stat violations then the code moves on with the one that are present. 
    Penalties from the stat file will be applied to these restraints to create a new endurance score.
    __________________________________________________________________________________________________________________________________________________________
    '''
    filterRestraint = filter_alt_file(restraint) # ['A', 'B', '114', '18', 'HA1', 'HD1']

    # check if restraint in high_alt_viol_list
    for i in range(len(high_alt_viol_list)):  # high_alt_viol_list: [viol_percent, viol_amount, viol_index, penalty, restraint_name]
        viol = high_alt_viol_list[i]
        filterViolRestraint = filter_alt_file(viol[4])
        if  filterRestraint != filterViolRestraint:
            continue
        # apply restraint
        penalty = viol[3] # get penalty
        enduranceScore = get_endurance_score(restraint)
        newEnduranceScore = enduranceScore - penalty
        # apply penalty on restraint
        restraint = set_endurance_score(restraint, newEnduranceScore)
        return restraint
    return restraint

##############################################################################################################################################################
#                                                                       Re-Write alt.tbl File                                                                #
##############################################################################################################################################################

def write_alt_file(new_altFileLines, cycle_num):
    '''
    ________________________________________________________________________________________________________________________________________________________
    input: new lines containing restraints and endurance score, cycle number
    output: new alt.tbl file for Xplor-NIH
    This function will write the alt file for the new cycle directory. It'll make a new directory base on the cycle number then copy the required files from 
    previous cycle. 
    The final step is creating the alt tbl in the new cycle directory. The file content would be the result from the apply_penalty_to_restraint
    function.
    ________________________________________________________________________________________________________________________________________________________
    '''
    fileContent = new_altFileLines
    os.system(f'mkdir /Users/Karen/AHNA/HERC5/HERC5_VS/{cycle_num}')
    os.system(f'cp /Users/Karen/AHNA/HERC5/HERC5_VS/{cycle_num -1}/ /Users/Karen/AHNA/HERC5/HERC5_VS/{cycle_num}/')
    f= open (f'/Users/Karen/AHNA/HERC5/HERC5_VS/{cycle_num}/alt.tbl', 'w')
    #f.write('\n'.join(''.join(sublist) for sublist in fileContent))
    f.write('\n'.join(fileContent))
    f.close()
    return f

##############################################################################################################################################################
#                                                                Implementation: Cycling Through Files                                                       #
##############################################################################################################################################################

def cycle(job_id,PDB_id,folder_name, cycle_num):
    '''
    ___________________________________________________________________________________________________________________________________________
    input: directory name, cycle number
    output: new alt.tbl file
    This function will cycle through the code depending how many time was specified. 
    It'll take make the folder for cycle 0 and copy neccesary restraint files 
    from the Best Evaluated directory. When the Xplor-NIH is ran from cycle 0, it should place the results within that cycle directory, 
    then the restraint files will be copied to the next cycle directory. 
    'folder_name' would the cycle directories' parent directory: ' /Users/Karen/AHNA/HERC5/HERC5_VS/'
    This function will also set the new endurance score using the apply_penalty_to_restraint function then it'll append the restraint to a list 

    [] make changes to original alt.tbl (before first run with XPLOR-NIH)
    [] evaluate stats file to obtain penalty
    [] obtain new endurance score
    [] write new alt.tbl in next cycle directory
    [] copy all other *.tbl files and finalx.pdb
    ___________________________________________________________________________________________________________________________________________
    '''
    # folder_name = ./{PDB_id}/{job_id}/
    # cycle 0 run 
    if cycle_num == 0:

        # get alt.tbl file
        alt_path = f'{folder_name}/BestEvaluated/alt.tbl'
        if os.path.exists(f'{alt_path}'):
            f = open (alt_path, 'r')
            lines = f.readlines()
            f.close()

            for i in range(len(lines)):
                restraints = lines[i]
                restraints = get_restraint_use(restraints)
                print (restraints)

        os.system(f'mkdir {folder_name}{cycle_num}; cp /{PDB_id}/{job_id}/BestEvaluated/ .')
        subprocess.run(f'cd {folder_name}{cycle_num} ; xplor -py ahna_dimer.py')
        
        # get stats file after run
        statFile = os.path.join(folder_name, str(cycle_num), 'ahna_dimer_##.pdb.stats')
        
        # Parse stat files and obtain violation list. Filter for violations with a score highter than 60.
        parse_xplor_stats_dict = parse_xplor_stats(statFile) #[[100.0, 0.99, 222, 0.99, '( segid A and resid 72 and name OG ) ( segid B and resid 80 and name HH21 )']
        alt_viol_dict = parse_xplor_stats_dict['alt_viol']
        #print (alt_viol_dict)
        high_alt_viol_list = list(filter(lambda x: x[0] >=60.0, alt_viol_dict))



    # # Obtain stats file path for violation list/dictionary
    # # if cycle_num == 0: --> cycle 0 will have the original untouched files no need to analyze 
    #     #statFile = os.path.join(folder_name, str(cycle_num), 'ahna_dimer_##.pdb.stats')
    # if cycle_num > 0:
    #     statFile = os.path.join(folder_name, str(cycle_num-1), 'ahna_dimer_##.pdb.stats') # cycle 1 will have the *.stat file from cycle 0 to analyze

    # # Obtain alt.tbl file for restraints and setting endurance score
    # if cycle_num > 0:
    #     altFilePath = os.path.join(folder_name,str(cycle_num -1),'alt.tbl')
    #     altFile = open(altFilePath, 'r')
    #     altFileLines = altFile.readlines()
    #     altFile.close()


        
    #     # set endurance score alt file in the previous directory
    #     for i in range(len(altFileLines)):
    #         restraint = altFileLines[i].strip()
    #         enable = get_restraint_use(restraint)
    #         # if the endurance score does not exist (i.e. in original alt.tbl file) then set endurance score to 20
    #         if not endurance_score_exist(restraint):
    #             restraint = set_endurance_score(restraint, 20)
    #             altFileLines[i] = restraint
    #     # save altFileLines as a new alt.tbl
    #     new_altFileLines = []
    #     for i in range(len(altFileLines)):
    #         restraint = altFileLines[i].strip() 
    #         # if no '!' charecter then append restraints
    #         if not get_restraint_use(restraint):
    #             new_altFileLines.append(restraint)
    #             continue
    #         # if '!' exists then this restraint is in high violation and penalized then added to list
    #         if get_restraint_use(restraint):
    #             applyPenalty = apply_penalty_to_restraint(restraint, high_alt_viol_list)
    #             new_altFileLines.append(applyPenalty)

    #     newAltFile = write_alt_file(new_altFileLines, cycle_num)
    #     return newAltFile

##############################################################################################################################################################
#                                                                               Implementation                                                               #
##############################################################################################################################################################

job_id = '240926_194514_267'
PDB_id= '2N74'
folder_name = f'./{PDB_id}/{job_id}/'

# for i in range(6): # for 5 cycles
#     if i == 0:
#         # This will copy the neccessary file from Best Evaluated folder to 0 directory
#         os.system(f'mkdir /Users/Karen/AHNA/HERC5/HERC5_VS/0')
#         os.system(f'cp /Users/Karen/AHNA/HERC5/HERC5_VS/ahna_dimer_##.pdb.stats /Users/Karen/AHNA/HERC5/HERC5_VS/0/')
#         os.system (f'cp /Users/Karen/AHNA/HERC5/HERC5_VS/ahna_dimer.py /Users/Karen/AHNA/HERC5/HERC5_VS/0/ ')
#         os.system(f'cp /Users/Karen/AHNA/HERC5/HERC5_VS/BestEvaluated/*.tbl /Users/Karen/AHNA/HERC5/HERC5_VS/0/')
#         os.system(f'cp /Users/Karen/AHNA/HERC5/HERC5_VS/BestEvaluated/finalx.pdb /Users/Karen/AHNA/HERC5/HERC5_VS/0/')
#     if i > 0:    
#         curFolder = os.path.join(folder_name, str(i))
#         os.system(f'cd {curFolder}; cp /Users/Karen/AHNA/HERC5/HERC5_VS/ahna_dimer.py .')
#         os.system(f'cd {curFolder}; cp {folder_name}/{i-1}/ahna_dimer_##.pdb.stats .')
#         os.system(f'cd {curFolder}; cp {folder_name}/{i-1}/*.tbl .')
#         os.system(f'cd {curFolder}; cp {folder_name}/{i-1}/finalx.pdb .')
#         cycle(folder_name, i)
        #os.system (f'cd {curFolder}; xplor -py ahna_dimer.py; cd ..')
        #os.system(f'cd {curFolder}; ln -s ../ahna_dimer.py .')
        #os.system(f'cd {folder_name}/{i}; cp {folder_name}/{i-1}/*.tbl .')
        #os.system(f'cd {folder_name}/{i}; cp {folder_name}/{i-1}/*.pdb .')
        #os.system (f'cd {folder_name}/{i}; xplor -py ahna_dimer.py; cd ..')



os.system(f'mkdir {folder_name}0; cp /{PDB_id}/{job_id}/BestEvaluated/ .; cd .')
alt_path = f'{folder_name}0/alt.tbl'
if os.path.exists(f'{alt_path}'):
    f = open (alt_path, 'r')
    lines = f.readlines()
    f.close()

    for i in range(len(lines)):
        restraints = lines[i]
        restraints = get_restraint_use(restraints)
        print (restraints)