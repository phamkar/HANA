# -*- coding: utf-8 -*-
"""NOESYSimulationB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mLd1ZJlBjuAcuY18ep3rWr89Cxo2TT-t
"""

#@title Install Dependencies
! pip -q install nmrglue
! pip -q install pynmrstar

#@title
protein_attached_heavy_atoms = {
  'A': {'H':'N', 'HA':'CA', 'HB1':'CB', 'HB2':'CB', 'HB3':'CB', 'MB':'CB', 'HB':'CB'},
  'C': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB', 'HG':'S'},
  'D': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB', 'HD2':'OD2'},
  'E': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HE2':'OE2', 'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG'},
  'F': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD1':'CD1', 'HD2':'CD2', 'QD':'CQD', 'HD':'CD',
        'HE1':'CE1', 'HE2':'CE2', 'QE':'CQE', 'HE':'CE', 'HZ':'CZ'},
  'G': {'H':'N', 'HA2':'CA', 'HA3':'CA', 'QA':'CA', 'HA':'CA'},
  'H': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD1':'ND1', 'HD2':'CD2', 'HE1':'CE1', 'HE2':'NE2'},
  'I': {'H':'N', 'HA':'CA', 'HB':'CB',
        'HD11':'CD1', 'HD12':'CD1', 'HD13':'CD1', 'MD1':'CD1', 'HD1':'CD1',
        'HG12':'CG1', 'HG13':'CG1', 'QG1':'CG1', 'HG1':'CG1',
        'HG21':'CG2', 'HG22':'CG2', 'HG23':'CG2', 'MG2':'CG2', 'HG2':'CG2'},
  'K': {'H':'N', 'HA':'CA',
        'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB', 'HD2':'CD', 'HD3':'CD', 'QD':'CD', 'HD':'CD',
        'QE':'CE','HE':'CE','HE2':'CE', 'HE3':'CE', 'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG',
        'HZ1':'NZ', 'HZ2':'NZ', 'HZ3':'NZ'},
  'L': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD11':'CD1', 'HD12':'CD1', 'HD13':'CD1', 'MD1':'CD1', 'HD1':'CD1',
        'HD21':'CD2', 'HD22':'CD2', 'HD23':'CD2', 'MD2':'CD2', 'HD2':'CD2', 'QMD':'CQD', 'HD':'CD',
        'HG':'CG'},
  'M': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HE1':'CE', 'HE2':'CE', 'HE3':'CE', 'ME':'CE', 'HE':'CE',
        'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG'},
  'N': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD21':'ND2', 'HD22':'ND2', 'QD2':'ND2', 'HD2':'ND2'},
  'P': {'H2':'N', 'H3':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD2':'CD', 'HD3':'CD', 'QD':'CD', 'HD':'CD', 'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG'},
  'Q': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HE21':'NE2', 'HE22':'NE2', 'QE2':'NE2', 'HE2':'NE2',
        'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG'},
  'R': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD2':'CD', 'HD3':'CD', 'QD':'CD', 'HD':'CD',
        'HE':'NE', 'HG2':'CG', 'HG3':'CG', 'QG':'CG', 'HG':'CG',
        'HH11':'NH1', 'HH12':'NH1', 'QH1':'NH1', 'HH1':'NH1',
        'HH21':'NH2', 'HH22':'NH2', 'QH2':'NH2', 'HH2':'NH2', 'QQH':'NQH', 'HH':'NH'},
  'S': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB', 'HG':'OG'},
  'T': {'H':'N', 'HA':'CA', 'HB':'CB', 'HG1':'OG1',
         'HG21':'CG2', 'HG22':'CG2', 'HG23':'CG2', 'MG2':'CG2', 'HG2':'CG2'},
  'V': {'H':'N', 'HA':'CA', 'HB':'CB',
         'HG11':'CG1', 'HG12':'CG1', 'HG13':'CG1', 'MG1':'CG1', 'HG1':'CG1',
         'HG21':'CG2', 'HG22':'CG2', 'HG23':'CG2', 'MG2':'CG2', 'HG2':'CG2', 'QMG':'CQG', 'HG':'CG'},
  'W': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
         'HD1':'CD1', 'HE1':'NE1', 'HE3':'CE3',
         'HH2':'CH2', 'HZ2':'CZ2', 'HZ3':'CZ3'},
  'Y': {'H':'N', 'HA':'CA', 'HB2':'CB', 'HB3':'CB', 'QB':'CB', 'HB':'CB',
        'HD1':'CD1', 'HD2':'CD2', 'QD':'CQD', 'HD':'CD',
        'HE1':'CE1', 'HE2':'CE2', 'QE':'CQE', 'HE':'CE', 'HH':'OH'},
}
homodimer_residue_label = {
  101:1,102:2,103:3,104:4,105:5,106:6,107:7,108:8,109:9,110:10,
  111:11,112:12,113:13,114:14,115:15,116:16,117:17,118:18,119:19,120:20,
  121:21,122:22,123:23,124:24,125:25,126:26,127:27,128:28,129:29,130:30,
  131:31,132:32,133:33,134:34,135:35,136:36,137:37,138:38,139:39,140:40,
  141:41,142:42,143:43,144:44,145:45,146:46,147:47,148:48,149:49,150:50,
  151:51,152:52,153:53,154:54,155:55,156:56,157:57,158:58,159:59,160:60,
  161:61,162:62,163:63,164:64,165:65,166:66,167:67,168:68,169:69,170:70,
  171:71,172:72,173:73
}

#@title Parse BMRB
'''
# Download and parse BMRB
parsed_dict = parse_bmrb.read_bmrb(ename='25793')
'''

import os
import numpy as np
import nmrglue as ng
import pynmrstar
import json

AAA_dict = {'CYS': 'C', 'ASP': 'D', 'SER': 'S', 'GLN': 'Q', 'LYS': 'K',
  'ILE': 'I', 'PRO': 'P', 'THR': 'T', 'PHE': 'F', 'ASN': 'N',
  'GLY': 'G', 'HIS': 'H', 'LEU': 'L', 'ARG': 'R', 'TRP': 'W',
  'ALA': 'A', 'VAL':'V', 'GLU': 'E', 'TYR': 'Y', 'MET': 'M'}
A_dict = {'C': 'CYS', 'D': 'ASP', 'S': 'SER', 'Q': 'GLN', 'K': 'LYS',
  'I': 'ILE', 'P': 'PRO', 'T': 'THR', 'F': 'PHE', 'N': 'ASN',
  'G': 'GLY', 'H': 'HIS', 'L': 'LEU', 'R': 'ARG', 'W': 'TRP',
  'A': 'ALA', 'V':'VAL', 'E': 'GLU', 'Y': 'TYR', 'M': 'MET'}

def read_bmrb(fname=None, ename=None):
  try:
    if fname != None:
      strentry = pynmrstar.Entry.from_file(fname)
    elif ename != None:
      strentry = pynmrstar.Entry.from_database(ename)
    else:
      return {}
  except:
    return {}

  # Title
  info_saveframes = strentry.get_saveframes_by_category('entry_information')
  title = info_saveframes[0]['Title'][0].strip()

  # extract sequences
  sequence_loops = strentry.get_loops_by_category('_Entity_comp_index')
  sequence_dict = json.loads(sequence_loops[0].get_json())
  sequence_list = list(map(lambda x: [x[1], x[2], AAA_dict[x[2]]],
                           sequence_dict['data']))
  fasta = ''.join(list(map(lambda x: x[2], sequence_list)))

  # extract chemical shifts
  atom_chem_shift_loops = strentry.get_loops_by_category('atom_chem_shift')

  # First, try from bond and chemical shift information
  # shift_list includes a set of lists:
  #     [nseq, 3-letter-seq, 1-letter-seq, chemical shift]
  atom_chem_shift_dict = json.loads(atom_chem_shift_loops[0].get_json())
  shift_list = list(map(lambda x: [x[4], x[6], AAA_dict[x[6]], x[7], x[10]],
                              atom_chem_shift_dict['data']))

  return {'Title': title, 'Fasta': fasta,
          'Sequence List': sequence_list,
          'Chemical Shifts': shift_list}
results = read_bmrb(ename=25793)
print(results)

# TO DO:
# READ AND PARSE PDB
# C13-NOESY, N15-NOESY based on PDB and BMRB

#@title Parsing PDB

import os
import numpy as np
from math import sqrt

# download pdb
PDB_ID = '2N74' #@param
B_GAP_dict = {'2N74': 100}

if not os.path.exists(PDB_ID + '.pdb'):
  ! wget https://files.rcsb.org/download/{PDB_ID}.pdb

#amino acid sequence
AAA_dict = {'CYS': 'C', 'ASP': 'D', 'SER': 'S', 'GLN': 'Q', 'LYS': 'K',
     'ILE': 'I', 'PRO': 'P', 'THR': 'T', 'PHE': 'F', 'ASN': 'N',
     'GLY': 'G', 'HIS': 'H', 'LEU': 'L', 'ARG': 'R', 'TRP': 'W',
     'ALA': 'A', 'VAL':'V', 'GLU': 'E', 'TYR': 'Y', 'MET': 'M'}

def distance3D(atom1, atom2):
  """ takes two coordinates. ex: ((26.266, 25.413, 2.842),
                                  (26.913, 26.639, -3.51))
      returns the distance
  """
  return sqrt((atom1[0] - atom2[0]) ** 2 +
              (atom1[1] - atom2[1]) ** 2 +
              (atom1[2] - atom2[2]) ** 2)

def readPDB(pdb_file, modelnumber):
  """
  Parameters
  ----------
  uploaded_pdb : address to a .pdb file
  modelnumber : the model number in the pdb (starting from 1)
  Returns
  -------
  pdb_list: a list of each [Nseq, atom's coordinates, aa, atom]
  """
  pdbLines, modelList = [], []
  tempLines = open(pdb_file, 'r').readlines()

  # clean
  for line in tempLines:
    #print(line)
    if line[0:4] in ['MODE', 'ATOM', 'ENDM']:
      pdbLines.append(line)

  # fill modelList
  for line in pdbLines:
    if line[0:5] == 'MODEL':
      modelList.append([])
    if line[0:4] != 'ATOM':
      continue
    if line[12:16].strip()[0] not in ['H']:
      continue
    aaa = line[17:20].strip()
    atm = line[12:16].strip()
    nSeq = int(line[23:26].strip()) # <residue sequence>
    x = float(line[30:38].strip())
    y = float(line[38:46].strip())
    z = float(line[46:54].strip())
    c = line[21:22].strip() # <chain_ID>
    if c == 'B':
      nSeq = nSeq - B_GAP_dict[PDB_ID]
    # in case MODEL not in PDB.
    if len(modelList) == 0:
      modelList.append([])

    modelList[-1].append( [nSeq, x, y, z, aaa, AAA_dict[aaa], atm, c] )

  return modelList[modelnumber - 1]

def createDistanceMatrix(pdb_list):
  distMat = np.zeros( (len(pdb_list), len(pdb_list), 4, 4 ) )
  keyList = []
  c_list = 'ABCD'
  for i in range(len(pdb_list)):
    nSeq, x, y, z, aaa, a, atm, c = pdb_list[i]
    keyList.append(c+'_'+a+str(nSeq)+atm)
    for j in range(i+1, len(pdb_list)):
      nSeq2, x2, y2, z2, aaa2, a2, atm2, c2 = pdb_list[j]
      dist = distance3D( (x, y, z), (x2, y2, z2))

      distMat[i, j, c_list.index(c), c_list.index(c2)] = \
        distMat[j, i, c_list.index(c2), c_list.index(c)] = dist

  return distMat, keyList

def hhDist (pdb_list):
  distList = []
  atmList = []
  aminoList = []
  assignList = []
  keyList = []
  atmdict = {}
  #coordList = []
  for i in range(len(pdb_list)):
    nSeq, x, y, z, aaa, a, atm, c = pdb_list[i]
    for j in range(i+1, len(pdb_list)):
      nSeq2, x2, y2, z2, aaa2, a2, atm2, c2 = pdb_list[j]
      dist = distance3D( (x, y, z), (x2, y2, z2))

      #if atm2[0] not in ['H']:
       # continue

      if 'H' not in [atm[0], atm2[0]]:
        continue

      if distMat[i, j, 0, 1] > 5.5:
        continue

      if distMat[i, j, 0, 1] > 0.01 and distMat[i, j, 0, 1] < 5.5:
        dist = distMat[i, j, 0,1] # giving 'rubber band' 40% more resistance
        distRound = round(dist, 2)
        aa = AAA_dict[aaa]
        aa2 = AAA_dict[aaa2]
        atmList.append(aa+str(nSeq)+atm + '-'+aa2+str(nSeq2) +atm2)
        distList.append(distRound)
        assignList.append([aa, nSeq, atm,aa2,nSeq2,atm2])
  for i in range(len(atmList)):
    key = atmList[i]
    value = distList[i]
    atmdict[key] = value
    keyList.append(key)
  return (atmdict, aminoList,assignList)


pdb_file = '/content/' + str(PDB_ID) + '.pdb'

pdb_list = readPDB(pdb_file, 0)
print(pdb_list)
distMat, keyList = createDistanceMatrix(pdb_list)
#print (distMat)

HHresults = hhDist(pdb_list)

#@title Assign Chemical Shifts HH

#BMRB chemical shift list
chemShifts = results['Chemical Shifts']
atomList = HHresults[2]
assignment = HHresults[0]
def get_shift(seqidx, atomname):
  filterAtoms = list(filter(lambda x :x[0] == str(seqidx) and x[3] ==atomname,
                            chemShifts))
  if len(filterAtoms) == 0:
    return -9999
  return float(filterAtoms[0][4])

def distance2height(HHdist, offset = 0.0):
    """ distance scaling using r^-6 approximation for H-H """

    min_hh = 1.7  # closest distance between H atoms (1.70 A)
    max_hh = 5.5  # farthest distance observed between H atoms

    max_I = 10**6 # arbitrary value
    min_I = 10**4 # arbitrary value

    approx = -6.0

    dist = min(HHdist, max_hh-offset)
    dist = max(dist, min_hh-offset)

    # A * r**approx + B = I
    # A * min_hh**approx + B = max_I    arbituary max
    # A * max_hh**approx + B = min_I    arbituary min
    #
    # A * (min_hh**approx - max_hh**approx) = max_I - min_I
    #

    A = (max_I - min_I) / ((min_hh-offset)**approx - (max_hh-offset)**approx)       # 75227372.04997641
    B = min_I - A * (max_hh-offset)**approx                     # -19444.257193289242

    #print(A, B, dist, approx, offset)
    return A * dist**approx + B
HHdist = HHresults[0]
print (type(HHdist))
#print(HHdist)
dataHeight = []
for values in HHdist.values():
  a = distance2height(values,0)
  dataHeight.append(a)

import re
regex = r"\d+"
c_list = 'ABCD'

def parse_key(key):
    c = key.split('_')[0]
    a = key.split('_')[1][0]
    nSeq = int(re.search(regex, key.split('_')[1]).group())
    sep = c+'_'+a+str(nSeq)
    atm = key.split(sep)[1]
    return c, a, nSeq, atm

def create_noesy_peak_list(noesy_type='nnoe'):
  # key: c+'_'+a+str(nSeq)+atm
  cnt = 0
  for key in keyList:
    c, a, nSeq, atm = parse_key(key)
    ncatm = protein_attached_heavy_atoms[a][atm]
    if noesy_type == 'nnoe':
      if ncatm[0] != 'N':
        continue
    elif noesy_type == 'cnoe':
      if ncatm[0] != 'C':
        continue
    nc_shift = get_shift(nSeq, ncatm)
    h_shift = get_shift(nSeq, atm)

    if nc_shift < -1000 or h_shift < -1000:
      continue

    grp1 = f'{a}{nSeq}{ncatm}'
    grp2 = f'{atm}'



    for key2 in keyList:
      c2, a2, nSeq2, atm2 = parse_key(key2)
      dist = distMat[nSeq, nSeq2, c_list.index(c), c_list.index(c2)]
      if key != key2 and dist == 0:
        continue
      if dist > 5:
        continue
      h2_shift = get_shift(nSeq2, atm2)

      if h2_shift < -1000:
        continue

      height = distance2height(dist)
      if nSeq != nSeq2:
        grp3 = f'{a2}{nSeq2}{atm2}'
      else:
        grp3 = f'{atm2}'

      asgn = f'{grp1}-{grp2}-{grp3}'
      line = '  %20s %8.3f %8.3f %8.3f %15d' % (asgn, nc_shift, h_shift,
                                                h2_shift, int(height))
      print(line)
      cnt+=1
  print(cnt)
create_noesy_peak_list()

print (atomList)
# get chemical shifts for protons
def getChemical_shift (atomList):
  protonC1, protonC2, heavyAtom_C = [],[],[]
  protonN1, protonN2, heavyAtom_N = [],[],[]
  for atomValue in atomList:
    heavy_atom = protein_attached_heavy_atoms[atomValue[0]][atomValue[2]]
    if heavy_atom[0] == 'C':
      C_atom = get_shift(atomValue[1], heavy_atom)
      CH_one = get_shift(atomValue[1],atomValue[2])
      CH_two = get_shift(homodimer_residue_label[atomValue[4]], atomValue[5])

      heavyAtom_C.append(C_atom)
      protonC1.append(CH_one)
      protonC2.append(CH_two)

    if heavy_atom[0] == 'N':
      N_atom = get_shift(atomValue[1], heavy_atom)
      NH_one = get_shift(atomValue[1],atomValue[2])
      NH_two = get_shift(homodimer_residue_label[atomValue[4]], atomValue[5])

      heavyAtom_N.append(N_atom)
      protonN1.append(NH_one)
      protonN2.append(NH_two)
  return (protonC1, protonC2, heavyAtom_C,
          protonN1, protonN2, heavyAtom_N)

chemicalShift_list = getChemical_shift (atomList)
CH1_shift = chemicalShift_list[0]
CH2_shift = chemicalShift_list[1]
C_shift = chemicalShift_list[2]

NH1_shift = chemicalShift_list[3]
NH2_shift = chemicalShift_list[4]
N_shift = chemicalShift_list[5]

print('C: ',C_shift, '\n'
      'N: ',N_shift)

import pandas as pd
C_data = list(map(lambda x,y,z,x1,y1: [x,y,z,x1,y1],
                  assignment, C_shift, CH1_shift, CH2_shift, dataHeight))
C_df = pd.DataFrame(C_data, columns = ['Assignments','w1', 'w2', 'w3','Data Height'])
C_string_df = C_df.to_string(index=False)

N_data = list(map(lambda x,y,z,x1,y1: [x,y,z,x1,y1],
                  assignment, N_shift, NH1_shift, NH2_shift, dataHeight))
N_df = pd.DataFrame(N_data, columns = ['Assignments','w1', 'w2', 'w3','Data Height'])
N_string_df = N_df.to_string(index=False)

f = open('C13NOESY.txt', 'w')
f.write(C_string_df)
f.close()

f = open('N15NOESY.txt', 'w')
f.write(N_string_df)
f.close()

